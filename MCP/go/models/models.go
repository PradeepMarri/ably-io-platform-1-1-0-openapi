package models

import (
	"context"
	"github.com/mark3labs/mcp-go/mcp"
)

type Tool struct {
	Definition mcp.Tool
	Handler    func(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error)
}

// ChannelStatus represents the ChannelStatus schema from the OpenAPI specification
type ChannelStatus struct {
	Isactive bool `json:"isActive"` // A required boolean value indicating whether the channel that is the subject of the event is active. For events indicating regional activity of a channel this indicates activity in that region, not global activity.
	Occupancy Occupancy `json:"occupancy,omitempty"` // An Occupancy instance indicating the occupancy of a channel. For events indicating regional activity of a channel this indicates activity in that region, not global activity.
}

// DeviceDetails represents the DeviceDetails schema from the OpenAPI specification
type DeviceDetails struct {
	Formfactor string `json:"formFactor,omitempty"` // Form factor of the push device.
	Id string `json:"id,omitempty"` // Unique identifier for the device generated by the device itself.
	Metadata map[string]interface{} `json:"metadata,omitempty"` // Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications.
	Platform string `json:"platform,omitempty"` // Platform of the push device.
	Push_recipient Recipient `json:"push.recipient,omitempty"` // Push recipient details for a device.
	Push_state string `json:"push.state,omitempty"` // the current state of the push device.
	Clientid string `json:"clientId,omitempty"` // Optional trusted client identifier for the device.
	Devicesecret string `json:"deviceSecret,omitempty"` // Secret value for the device.
}

// Occupancy represents the Occupancy schema from the OpenAPI specification
type Occupancy struct {
	Presencemembers int `json:"presenceMembers,omitempty"` // The number of members currently entered into the presence channel.
	Presencesubscribers int `json:"presenceSubscribers,omitempty"` // The number of connections that are authorised to subscribe to presence messages.
	Publishers int `json:"publishers,omitempty"` // The number of connections attached to the channel that are authorised to publish.
	Subscribers int `json:"subscribers,omitempty"` // The number of connections attached that are authorised to subscribe to messages.
	Presenceconnections int `json:"presenceConnections,omitempty"` // The number of connections that are authorised to enter members into the presence channel.
}

// Error represents the Error schema from the OpenAPI specification
type Error struct {
	Serverid string `json:"serverId,omitempty"` // Server ID with which error was encountered.
	Statuscode int `json:"statusCode,omitempty"` // Status error code.
	Code int `json:"code,omitempty"` // Error code.
	Href string `json:"href,omitempty"` // Link to help with error.
	Message string `json:"message,omitempty"` // Message explaining the error's cause.
}

// Message represents the Message schema from the OpenAPI specification
type Message struct {
	Encoding string `json:"encoding,omitempty"` // This will typically be empty as all messages received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the data payload.
	Extras Extras `json:"extras,omitempty"` // Extras object. Currently only allows for [push](https://www.ably.io/documentation/general/push/publish#channel-broadcast-example) extra.
	Id string `json:"id,omitempty"` // A Unique ID that can be specified by the publisher for [idempotent publishing](https://www.ably.io/documentation/rest/messages#idempotent).
	Name string `json:"name,omitempty"` // The event name, if provided.
	Timestamp int64 `json:"timestamp,omitempty"` // Timestamp when the message was received by the Ably, as milliseconds since the epoch.
	Clientid string `json:"clientId,omitempty"` // The [client ID](https://www.ably.io/documentation/core-features/authentication#identified-clients) of the publisher of this message.
	Connectionid string `json:"connectionId,omitempty"` // The connection ID of the publisher of this message.
	Data string `json:"data,omitempty"` // The string encoded payload, with the encoding specified below.
}

// PresenceMessage represents the PresenceMessage schema from the OpenAPI specification
type PresenceMessage struct {
	Action string `json:"action,omitempty"` // The event signified by a PresenceMessage.
	Clientid string `json:"clientId,omitempty"` // The client ID of the publisher of this presence update.
	Connectionid string `json:"connectionId,omitempty"` // The connection ID of the publisher of this presence update.
	Data string `json:"data,omitempty"` // The presence update payload, if provided.
	Encoding string `json:"encoding,omitempty"` // This will typically be empty as all presence updates received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the data payload.
	Extras Extras `json:"extras,omitempty"` // Extras object. Currently only allows for [push](https://www.ably.io/documentation/general/push/publish#channel-broadcast-example) extra.
	Id string `json:"id,omitempty"` // Unique ID assigned by Ably to this presence update.
	Timestamp int64 `json:"timestamp,omitempty"` // Timestamp when the presence update was received by Ably, as milliseconds since the epoch.
}

// TokenDetails represents the TokenDetails schema from the OpenAPI specification
type TokenDetails struct {
	Expires int `json:"expires,omitempty"` // Timestamp of token expiration.
	Issued int `json:"issued,omitempty"` // Timestamp of token creation.
	Keyname string `json:"keyName,omitempty"` // Name of the key used to create the token
	Token string `json:"token,omitempty"` // The Ably Token.
	Capability string `json:"capability,omitempty"` // Regular expression representation of the capabilities of the token.
}

// TokenRequest represents the TokenRequest schema from the OpenAPI specification
type TokenRequest struct {
	Nonce string `json:"nonce"` // An unquoted, un-escaped random string of at least 16 characters. Used to ensure the Ably TokenRequest cannot be reused.
	Timestamp int `json:"timestamp"` // Time of creation of the Ably TokenRequest.
	Capability map[string]interface{} `json:"capability"` // The [capabilities](https://www.ably.io/documentation/core-features/authentication#capabilities-explained) (i.e. a set of channel names/namespaces and, for each, a set of operations) which should be a subset of the set of capabilities associated with the key specified in keyName.
	Clientid string `json:"clientId,omitempty"` // The [client ID](https://www.ably.io/documentation/core-features/authentication#identified-clients) to be assosciated with the token. Can be set to * to allow for any client ID to be used.
	Keyname string `json:"keyName"` // Name of the key used for the TokenRequest. The keyName comprises of the app ID and key ID on an API Key.
}

// ChannelDetails represents the ChannelDetails schema from the OpenAPI specification
type ChannelDetails struct {
	Region string `json:"region,omitempty"` // In events relating to the activity of a channel in a specific region, this optionally identifies the region.
	Status ChannelStatus `json:"status,omitempty"` // A ChannelStatus instance.
	Channelid string `json:"channelId"` // The required name of the channel including any qualifier, if any.
	Isglobalmaster bool `json:"isGlobalMaster,omitempty"` // In events relating to the activity of a channel in a specific region, this optionally identifies whether or not that region is responsible for global coordination of the channel.
}

// Extras represents the Extras schema from the OpenAPI specification
type Extras struct {
	Push Push `json:"push,omitempty"`
}

// Push represents the Push schema from the OpenAPI specification
type Push struct {
	Data string `json:"data,omitempty"` // Arbitrary [key-value string-to-string payload](https://www.ably.io/documentation/general/push/publish#channel-broadcast-example).
	Fcm map[string]interface{} `json:"fcm,omitempty"` // Extends and overrides generic values when delivering via GCM/FCM. [See examples](https://www.ably.io/documentation/general/push/publish#payload-structure)
	Notification Notification `json:"notification,omitempty"`
	Web map[string]interface{} `json:"web,omitempty"` // Extends and overrides generic values when delivering via web. [See examples](https://www.ably.io/documentation/general/push/publish#payload-structure)
	Apns map[string]interface{} `json:"apns,omitempty"` // Extends and overrides generic values when delivering via APNs. [See examples](https://www.ably.io/documentation/general/push/publish#payload-structure)
}

// Recipient represents the Recipient schema from the OpenAPI specification
type Recipient struct {
	Clientid string `json:"clientId,omitempty"` // Client ID of recipient
	Deviceid string `json:"deviceId,omitempty"` // Client ID of recipient
	Devicetoken string `json:"deviceToken,omitempty"` // when using APNs, specifies the required device token.
	Registrationtoken string `json:"registrationToken,omitempty"` // when using GCM or FCM, specifies the required registration token.
	Transporttype string `json:"transportType,omitempty"` // Defines which push platform is being used.
}

// SignedTokenRequest represents the SignedTokenRequest schema from the OpenAPI specification
type SignedTokenRequest struct {
	Keyname string `json:"keyName"` // Name of the key used for the TokenRequest. The keyName comprises of the app ID and key ID on an API Key.
	Nonce string `json:"nonce"` // An unquoted, un-escaped random string of at least 16 characters. Used to ensure the Ably TokenRequest cannot be reused.
	Timestamp int `json:"timestamp"` // Time of creation of the Ably TokenRequest.
	Capability map[string]interface{} `json:"capability"` // The [capabilities](https://www.ably.io/documentation/core-features/authentication#capabilities-explained) (i.e. a set of channel names/namespaces and, for each, a set of operations) which should be a subset of the set of capabilities associated with the key specified in keyName.
	Clientid string `json:"clientId,omitempty"` // The [client ID](https://www.ably.io/documentation/core-features/authentication#identified-clients) to be assosciated with the token. Can be set to * to allow for any client ID to be used.
	Mac string `json:"mac"` // A signature, generated as an HMAC of each of the above components, using the key secret value.
}

// Notification represents the Notification schema from the OpenAPI specification
type Notification struct {
	Collapsekey string `json:"collapseKey,omitempty"` // Platform-specific, used to group notifications together.
	Icon string `json:"icon,omitempty"` // Platform-specific icon for the notification.
	Sound string `json:"sound,omitempty"` // Platform-specific sound for the notification.
	Title string `json:"title,omitempty"` // Title to display at the notification.
	Body string `json:"body,omitempty"` // Text below title on the expanded notification.
}
